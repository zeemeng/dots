" !!! NEEDS TO BE AT THE TOP. ALTERS VALUES OF OTHER OPTIONS WHEN SET/UNSET !!!
" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible


""""""""""""""""""""
""" KEY MAPPINGS """
""""""""""""""""""""
" *map-table*
"          Mode  | Norm | Ins | Cmd | Vis | Sel | Opr | Term | Lang | ~
" Command        +------+-----+-----+-----+-----+-----+------+------+ ~
" [nore]map      | yes  |  -  |  -  | yes | yes | yes |  -   |  -   |
" n[nore]map     | yes  |  -  |  -  |  -  |  -  |  -  |  -   |  -   |
" [nore]map!     |  -   | yes | yes |  -  |  -  |  -  |  -   |  -   |
" i[nore]map     |  -   | yes |  -  |  -  |  -  |  -  |  -   |  -   |
" c[nore]map     |  -   |  -  | yes |  -  |  -  |  -  |  -   |  -   |
" v[nore]map     |  -   |  -  |  -  | yes | yes |  -  |  -   |  -   |
" x[nore]map     |  -   |  -  |  -  | yes |  -  |  -  |  -   |  -   |
" s[nore]map     |  -   |  -  |  -  |  -  | yes |  -  |  -   |  -   |
" o[nore]map     |  -   |  -  |  -  |  -  |  -  | yes |  -   |  -   |
" t[nore]map     |  -   |  -  |  -  |  -  |  -  |  -  | yes  |  -   |
" l[nore]map     |  -   | yes | yes |  -  |  -  |  -  |  -   | yes  |

" Convenient cursor motion while in insert mode
noremap! <C-t> <Home>
noremap! <C-y> <End>
noremap! <C-h> <Left>
noremap! <C-j> <Down>
noremap! <C-k> <Up>
noremap! <C-l> <Right>

" Insert mode word-boundary cursor motion
inoremap <C-f> <S-Right>
inoremap <C-b> <S-Left>
inoremap <C-e> <Esc>ea
inoremap <C-d> <C-o>d$

" Command mode word-boundary cursor motion
cnoremap <C-f> <S-Right><Right>
cnoremap <C-b> <S-Left>
cnoremap <C-e> <S-Right>

" Increase and decrease indent in insert mode
inoremap <C-c> <C-d>
inoremap <C-q> <C-t>

" Convenient navigation between windows
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l
tnoremap <C-x> <C-\><C-N>

" Convenient window resizing
" '(' and ')' are normal-only maps, since these keys are useful in visual mode
noremap + <Cmd>resize +1<CR>
noremap _ <Cmd>resize -1<CR>
nnoremap ( <Cmd>vertical resize +1<CR>
nnoremap ) <Cmd>vertical resize -1<CR>

" Terminal windows resizing
tnoremap <C-q> <Cmd>resize +1<CR>
tnoremap <C-w> <Cmd>resize -1<CR>
tnoremap <C-o> <Cmd>vertical resize +1<CR>
tnoremap <C-p> <Cmd>vertical resize -1<CR>

" Go to [count] newer cursor position in jump list
noremap <C-p> <C-i>

" Quickly scroll down [count] lines. To scroll up [count] lines, use the
" default mapping <C-e>
noremap <C-q> <C-y>

" Convenient horizontal and vertical splitting
noremap <C-w>> :vsplit<CR><C-w>l
noremap <C-w>< :split<CR><C-w>j

" Toggle Netrw
noremap <C-n> <Cmd>Lex<CR>

" List open buffers
noremap <C-b> <Cmd>ls<CR>

" 1. Convenient launching of command-line mode
" 2. Repeat last find character (forward) using <CR> or <C-m>
noremap ; :
noremap <C-m> ;

" Convenient launching of buffer-like window for editing ex-commands
noremap q; q:i

" Repeat the last Ex command
noremap <C-x> @:<CR>

" Close enough to the behaviour in neovim
noremap Q @q

" Write the buffer
noremap <C-s> <Cmd>w<CR>
noremap! <C-s> <Esc><Cmd>w<CR>

" Clear current search highlights
nnoremap <Esc> <Cmd>nohlsearch<CR>


""""""""""""""""
""" COMMANDS """
""""""""""""""""
" Help pages quick access
command! -bar -nargs=* -complete=help H vertical help <args>
command! -bar -nargs=* -complete=help Ho help <args> | only
command! -bar -nargs=* -complete=help Ht tab help <args>
command! Hi vertical help index
command! Hoi help index | only
command! Hti tab help index
command! Hcl helpclose
command! Hq helpclose

" Tab management
command! -bar -nargs=* -complete=file T tabedit <args>
command! -bang -nargs=? Tcl tabclose<bang> <args>
command! -bang -nargs=? To tabonly<bang> <args>
command! -nargs=? Tm tabmove <args>
command! Tf tabfirst
command! Tl tablast

" Close all buffers except the current one. (1. close all buffers; 2. edit the last
" opened buffer; 3. close the unnamed buffer created after step 1)
command! Bdo %bd | e# | bd#

" Write file and reedit to refresh syntax highlighting
command! W w | e


"""""""""""""""
""" VISUALS """
"""""""""""""""
"Set Netrw to tree style listing
let g:netrw_liststyle = 3

" Disable the default Vim startup message.
set shortmess+=I

" Short search match count
set shortmess-=S

" Highlight all search matches
set hlsearch

" Show line numbers.
set number relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" Show currently typed command in the command line
set showcmd

" Explicitly set bg to dark to avoid improper auto-detection of bg color
" set bg=dark

" Set a proper status line
set statusline=
set statusline+=%1*\ [%n]\  " buffer number
set statusline+=%2*\ %<%F\  " full file path
set statusline+=%3*%{&filetype!=''?'\ '..&filetype..'\ ':''}  " file type
set statusline+=%5*\ %{&fenc!=''?&fenc:&enc}\  " encoding
set stl+=%8*\ %{&ff}\  " file format (dos/unix/etc.)
set stl+=%7*\ %m%r%w\  " set modified flag, readonly flag, preview window
set stl+=%7*%= " left right alignment separator
set stl+=%2*\ row:\ %l/%L\ %-6((%p%%)%)\  " row number/total and %
set stl+=%3*\ col:\ %-3c\  " current byte/real column number

hi User1 ctermbg=185 ctermfg=16
hi User2 ctermbg=24 ctermfg=15
hi User3 ctermbg=6 ctermfg=16
hi User4 ctermbg=222 ctermfg=16
hi User5 ctermbg=78 ctermfg=16
hi User6 ctermbg=160 ctermfg=15
hi User7 ctermbg=67 ctermfg=16
hi User8 ctermbg=109 ctermfg=16


"""""""""""""""""""""""
""" GENERAL OPTIONS """
"""""""""""""""""""""""
" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support
set mouse+=a

" Automatically yank, delete, change and put using the "+" register (system
" clipboard) instead of the default unnamed register
set clipboard=unnamedplus

" Set appropriate tab settings
set tabstop=4 " displayed width of a \t character
set shiftwidth=4 " width of one level of indentation

" Set a faster timeoutlen to not wait the default 1s when multiple mappings
" and/or key codes share the same leading input sequence.
set timeoutlen=200

" Put new splits to the right-side by default
set splitright

" Set the default syntax highlighting for "sh" file type to be POSIX compliant
let g:is_posix = 1

" Turn on syntax highlighting.
syntax on

" Turn on 'filetype' plugins and 'filetype' indentation settings
filetype plugin indent on

" Source the fold_settings.vim configurations.
runtime fold_settings.vim

