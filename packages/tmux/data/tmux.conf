#############################
### Environment variables ###
#############################

# Set TMUX_CONFD env var to an appropriate value to find utility shell scripts
%if "$TMUX_CONFD"
  TMUX_CONFD="$TMUX_CONFD"
%elif "$XDG_CONFIG_HOME"
  TMUX_CONFD="$XDG_CONFIG_HOME/tmux"
%else
  TMUX_CONFD="$HOME/.config/tmux"
%endif


###############
### Options ###
###############

# As per manpage the value for option "default-terminal" must be set to "screen", "tmux" or a derivative of them.
# Use `-256color` suffix to enable "256 colors" support.
# Use "screen" for better compatibility as GNU screen's terminfo database entry is widely available. However it does not support italics. Use "tmux" to enable all capabilities including italics. The "tmux" terminfo database entry should be available on modern systems.
# Note that Tmux terminals do not support all features of the ANSI X3.64 spec (terminal control sequences). Specifically some SGR (Select Graphic Rendition) sequences, notably the subset, OSC (Operating System Command), is not fully implemented. For example, querying OSC 11 to get the background color seems to not be working, causing issues with Vim's ability to auto-detect the terminal background color and to set an appropriate default colorscheme
set -s default-terminal "tmux-256color"

# Set the colors of the status line
# set -g status-style bg=#214671
# set -g status-style bg=#006f97
# set -g status-style bg=#0090aa
# set -g status-style bg=#009eb7
set -g status-style bg=colour24

# set -g status-left-style bg=#44ce99,bold
# set -g status-left-style bg=#00bf9b,bold
# set -g status-left-style bg=#009f8b,bold
# set -g status-left-style bg=#007d78,bold
set -g status-left-style bg=#49a9a3,bold
set -g status-left " #S "

# set -g window-status-style bg=colour24
# set -g window-status-style bg=#4291f9
# set -g window-status-style bg=#006f97
# set -g window-status-style bg=#0090aa
# set -g window-status-style bg=#009eb7
# set -g window-status-style bg=#7ff9c0,fg=colour235
set -g window-status-style bg=#214671
set -g window-status-format "| #[bold]#I#[nobold] #W "
# set -g window-status-current-style bg=#7ff9c0,fg=colour235
# set -g window-status-current-style bg=#8ce081,fg=colour235
# set -g window-status-current-style bg=#9fe780,fg=colour235
# set -g window-status-current-style bg=#f9f871,fg=colour235
# set -g window-status-current-style bg=#ccf6ff,fg=colour235
# set -g window-status-current-style bg=#cce9ff,fg=colour235
set -g window-status-current-style bg=#e6f4f1,fg=colour235
set -g window-status-current-format "| #[bold]#I#[nobold] #W "
set -g window-status-separator ""

# set -g status-right "#[bg=#7177bf] #H #[bg=#f9f871,fg=colour235] %H:%M "
# set -g status-right "#[bg=#6469bf] #H #[bg=#f9f871,fg=colour235] %H:%M "
set -g status-right "#[bg=#4a5589] #H #($TMUX_CONFD/session-uptime.sh)#[bg=#f9f871,fg=colour235] %H:%M "

# Have tmux set the title of the outside terminal
set -g set-titles on

# Define the terminal title string
set -g set-titles-string "[#S](#I) #W @ #h"

# Allow programs in the pane to change the title using terminal escape sequences
set -g allow-rename on

# Set the keystroke "C-a" as a prefix key
set -g prefix C-a

# Enable scroll-back using the mouse/trackpad (without explicitly entering copy-mode)
set -g mouse on

# Have the window IDs renumbered when one of them is removed / closed, so as to maintain consecutive integer IDs.
# Default behaviours is to not renumber window IDs. Therefore, ID gaps will be created if some of existing
# windows are removed.
set -g renumber-windows on

# Set starting index for windows and panes to 1 instead of 0
set -g base-index 1
set -wg pane-base-index 1

# Use vi key bindings at the tmux command prompt
set -g status-keys vi

# Set vi mode-keys for copy-mode
set -g mode-keys vi

# Attempt to set the external clipboard when text is copied
set -s set-clipboard on

# For WSL / Msys2 systems on Windows. Bind 'y' to yank selection to the Windows clipboard. See ref below.
# https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/clip
# For a more modern approach to handle system clipboard using external tools, see the following ref:
# https://github.com/tmux/tmux/wiki/Clipboard#how-to-configure---tmux-32-and-later
#
#if-shell 'command -v clip.exe' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "clip.exe"'


###########################
### Key bindings (pane) ###
###########################

# Optimize selection of panes according to vim motions
bind -T root M-C-h select-pane -L
bind -T root M-C-j select-pane -D
bind -T root M-C-k select-pane -U
bind -T root M-C-l select-pane -R

# Optimize the resizing of panes according to vim motions
bind -r C-h resize-pane -L
bind -r C-j resize-pane -D
bind -r C-k resize-pane -U
bind -r C-l resize-pane -R

# Convenient window zoom
bind -T root M-C-z resize-pane -Z

# Set more convenient split pane keys
bind < split-window -v
bind > split-window -h
bind -T root M-C-u split-window -v
bind -T root M-Tab split-window -h

# Break the current pane into a new window at the index following the current window index
bind b break-pane -a
bind -T root M-C-b break-pane -a

# Join the current pane as a vertical pane to the prompted target
bind j command-prompt -T target -p 'join-pane to: [<session>:<window>.<pane>]' 'join-pane -h -t %1'

# Join the current pane as a horizontal pane to the prompted target
bind h command-prompt -T target -p '(horizontal) join-pane to: [<session>:<window>.<pane>]' 'join-pane -v -t %1'

# Kill the current pane
bind -T root M-C-d kill-pane


#############################
### Key bindings (window) ###
#############################

# Navigate between windows easily
bind -T root M-C-n next-window
bind -T root M-C-p previous-window
bind -T root M-C-q select-window -t 1
bind -T root M-C-w select-window -t 2
bind -T root M-C-e select-window -t 3
bind -T root M-C-r select-window -t 4
bind -T root M-C-t select-window -t 5
bind -T root M-C-y select-window -t 6

# Switch to previously selected window
bind - last-window
bind -T root M-C-_ last-window

# Create a new window after the current one
bind C new-window -a
bind -T root M-C-c new-window -a

# Kill the current window
bind X kill-window
bind -T root M-C-x kill-window

# Kill all other windows except the current one
bind o command-prompt -T window-target -p 'Kill other windows except (current) or' -I ':' "kill-window -a -t %1"

# Prompt a index where to move the current window, shifting surrounding windows accordingly
bind . command-prompt -F -N -T window-target -p 'move-window to index:' 'if-shell "test %1 -gt #I" "move-window -a -t %1" "move-window -b -t %1"'
bind -T root M-C-m command-prompt -F -N -T window-target -p 'move-window to index:' 'if-shell "test %1 -gt #I" "move-window -a -t %1" "move-window -b -t %1"'


################################
### Key bindings (copy-mode) ###
################################

# Enter copy-mode
bind -T root M-C-v copy-mode

# Bind 'v' in copy-mode to start selection in copy-mode
bind -T copy-mode-vi v send-keys -X begin-selection

# Bind 'y' in copy-mode to yank and pipe the selection, then exit copy-mode
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel

# Bind 'Y' in copy-mode to yank and pipe the selection, then exit copy-mode
bind -T copy-mode-vi Y send-keys -X copy-line-and-cancel \; display-message "Copied 1 line."

# In copy mode, copy word under the cursor
bind -T copy-mode-vi W run-shell "tmux set-buffer -w #{copy_cursor_word}" \; display-message "#{copy_cursor_word}" \; send-keys -X cancel

# Enter copy-mode; put the #{copy_cursor_word} in the buffer and pass it to system clipboard (-w); display confirmation; exit copy-mode
bind W copy-mode \; run-shell "tmux set-buffer -w #{copy_cursor_word}" \; display-message "#{copy_cursor_word}" \; send-keys -X cancel

# Bind 'P' following the prefix key (as assigned to the default `-T prefix` table) to paste the most recent buffer
bind P paste-buffer


####################################
### Key bindings (miscellaneous) ###
####################################

# Send the 'C-a' key input as it to the program within the pane / window when 'C-a' is pressed twice
bind C-a send-prefix -2

# Reload config file easily
bind C-r source-file "$TMUX_CONFD/tmux.conf" \; display-message "source-file done"

# Force refresh of status line
bind C-s refresh-client -S \; display-message "Refreshed status line"

